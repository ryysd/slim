/*
 *  barber.lmn -- The Sleeping Barbar Problem
 *
 *  @author  Masato Gocho
 *  @date    2010.01.08
 */


% The Sleeping Barber Problem:
%
% A barbershop consists of a waiting room with S seats and a barber room with one barber chair.
% There are c customers and one barber.
% Customers alternate between growing hair and getting a haircut.
% The Barber sleeps and cuts hair.
% If there are no customers to be served, the barber sleeps.
% If a customer wants a haircut and all chairs are occupied, then the customer leaves the shop and skips the haircut.
% If chairs are available but the barber is busy, then the customer waits in one of the available chairs until the barber is free.
% If the barber is asleep, the customer wakes up the barber.

proc_gen{
  barber(sleep).
  chair(free).
  seat=[].       % FIFO Queue using list
  c=15.

  gen_cust @@ c=X :- Y=X-1, X>0 | c=Y, c(normal).
}.
gen_end @@ proc_gen{$p, @p, c=0}/ :- $p.

b_sleep @@ barber(X), seat=[], chair(free) :- unary(X) | barber(sleep), seat=[].
b_wake_ @@ barber(X), seat=[C |Y] :- unary(X) | barber(busy),  seat=[C |Y].
c_glow_ @@ c(normal)     :- c(glow).
c_wait_ @@ c(glow), X=[] :- X='.'(c(wait), []).
ch_free @@ chair(free), seat=[X |Y]  :- chair(X), seat=Y.
b_cut_c @@ chair(c(X)), barber(busy) :- unary(X) | chair(c(cut)), barber(busy).
b_end_c @@ chair(c(cut)), barber(X)  :- chair(free), barber(X), c(normal).
