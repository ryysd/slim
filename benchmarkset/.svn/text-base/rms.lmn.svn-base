/*
 *  rms.lmn -- Rate Monotonic Scheduling + mutex
 *
 *  @author  Masato Gocho
 *  @date    2008.09.10
 *           2009.08.21  modified
 */

% property0: priority bug


task_set_OK @@
  {$p,@p, schej{$s,@s, wait{$w}}}/ :-
  {$p,@p, schej{$s,@s, task{$w}}}.

{
  input{
  {

% instance1(testcode)
    task{id(a), r(2), c(1), d(3), t(6)}.
    task{id(b), r(0), c(3), d(8), t(8)}.
    task{id(c), r(0), c(4), d(12),t(12)}.
    task{id(d), r(2), c(2), d(8), t(8)}.

/*
% instance2
    task{id(a), r(2), c(1), d(3), t(6)}.
    task{id(b), r(0), c(3), d(8), t(8)}.
    task{id(c), r(0), c(4), d(12),t(12)}.
    task{id(d), r(2), c(2), d(8), t(8)}.
    task{id(e), r(1), c(1), d(4), t(5)}.
    task{id(f), r(0), c(2), d(3), t(3)}.
*/
/*
% instance3
    task{id(a), r(2), c(1), d(3), t(6)}.
    task{id(b), r(0), c(3), d(8), t(8)}.
    task{id(c), r(0), c(4), d(12),t(12)}.
    task{id(d), r(2), c(2), d(8), t(8)}.
    task{id(e), r(1), c(1), d(4), t(5)}.
    task{id(f), r(0), c(2), d(3), t(3)}.
    task{id(g), r(3), c(1), d(5), t(5)}.
*/
/*
% instance4
    task{id(a), r(2), c(1), d(3), t(6)}.
    task{id(b), r(0), c(3), d(8), t(8)}.
    task{id(c), r(0), c(4), d(12),t(12)}.
    task{id(d), r(2), c(2), d(8), t(8)}.
    task{id(e), r(1), c(1), d(4), t(5)}.
    task{id(f), r(0), c(2), d(3), t(3)}.
    task{id(g), r(3), c(1), d(5), t(5)}.
    task{id(h), r(2), c(7), d(12). t(15)}.
*/
    initN @@
      task{r(R),   c(C),   d(D),   t(T),   $t} :- int(R),int(C),int(D),int(T),P=-1*C |
      task{r(R,R), c(C,C), d(D,D), t(T,T), p(P), $t}, n(T).
    initM @@
      task{r(R),   c(C),   d(D),   t(T),   $t} :- int(R),int(C),int(D),int(T),P=-1*C |
      task{r(R,R), c(C,C), d(D,D), t(T,T), p(P), mutex(0), $t}, n(T).
 
      n(X), n(Y) :- X=:=Y | n(X).
    }.
    {$p, @p}/ :- $p.
    _lcm0 @@
      n(X), n(Y) :- X>=Y, P=X*Y | gcd(X,Y, lcm(P)).
    _lcm1 @@
      gcd(X,Y,lcm(P))   :- Z=(X mod Y), Z=\=0 |
      gcd(Y,Z,lcm(P)).
    _lcm2 @@
      gcd(X,Y,lcm(P))   :- Z=(X mod Y), Z=:=0 |
      gcd(Y, lcm(P)).
    _lcm3 @@
      gcd(X, lcm(Y)) :- Z=Y/X, Z>0 |
      n(Z).
  }.
  init_end @@
    spawn{@r}, input{$p[],@p,n(N)}/   :- int(N) |
    spawn{@r,$p[],time(0)}, lim(N).
  
  schej{
    mutex(1).
    mutex @@
      task{mutex(0), $t}, mutex(M) :- M>0, M2=M-1 |
      task{mutex(1), $t}, mutex(M2).

    schj0 @@
      time(T), task{c(C,CC), d(D,DD),$t} :- \+($t=($m, mutex(L))), int(CC),int(DD), C=\=0,    Y=T+1,Y>D  |
      dime(T), dead{c(C,CC),d(DD,DD),$t}.
    schj1 @@
      time(T), task{c(C,CC), d(D,DD),$t} :- \+($t=($m, mutex(L))), int(CC),int(DD), C>0,X=C-1,Y=T+1,Y=<D |
      cime(Y), task{c(X,CC), d(D,DD),$t}.
    schj1 @@
      time(T), task{c(C,CC), d(D,DD), mutex(1), $t} :- int(CC),int(DD), C>0,X=C-1,Y=T+1,Y=<D |
      cime(Y), task{c(X,CC), d(D,DD), mutex(1), $t}.
  }.
  schedlr_is_dead @@
    schej{$s,@s, dead{$t}}/ :-
    death{$s,@s, dead{$t}}.
  task_goto_slee1 @@
    schej{$p,@p, time(T), task{c(C,CC),$t}}/, sleep{$s,@s} :- \+($t=($m, mutex(L))), int(T),int(C),int(CC) |
    schej{$p,@p, time(T)},                    sleep{$s,@s, task{c(CC,CC), $t}}.
  task_goto_slee2 @@
    schej{$p,@p, time(T), mutex(M), task{c(C,CC), mutex(1), $t}}/, sleep{$s,@s} :- int(T),int(C),int(CC),M2=M+1 |
    schej{$p,@p, time(T), mutex(M2)},                              sleep{$s,@s, task{c(CC,CC), mutex(0), $t}}.
  time_goto_ready @@
    schej{$s,@s, cime(T)}, ready{$r,@r} :- int(T) |
    schej{$s,@s},          ready{$r,@r, time(T)}.

  spawn{
    spawn @@
      time(T), task{r(R,RR),$t} :- int(RR),T>=R |
      rime(T), rask{r(R,RR),$t}.
  }.
  task_goto_ready @@
    spawn{$s,@s, rime(T), rask{$t}}/, ready{$r,@r} :- int(T) |
    spawn{$s,@s, time(T)},            ready{$r,@r, task{$t}}.
  time_goto_out__ @@
    spawn{$s,@s,  time(T)}/ :- int(T)	|
    spawn{$s,@s}, time(T).

  ready{
    ready @@
      time(T), task{d(D,DD),$t}	:- int(DD), D<T |
      dime(T), dead{d(D,DD),$t}
  }.
  ready_is_dead__ @@
    ready{$r,@r, dead{$t}}/ :-
    death{$r,@r, dead{$t}}.
  time_goto_sleep @@
    ready{$r,@r, time(T)}/, sleep{$s,@s} :- int(T)	|
    ready{$r,@r},           sleep{$s,@s, time(T)}.
  schej_get_task_ @@
    ready{$r,@r, task{$t}}, schej{@s, mutex(L), time(T)}	:- int(T),int(L)	|
    ready{$r,@r},           schej{@s, mutex(L), time(T), wait{$t}}.
  task_is_elected @@
    ready{$r,@r, task{p(P),$t}},
    schej{@s, mutex(L), time(T), wait{p(PP), c(C,CC),$w}} :- int(T),int(CC),P>PP,C>0,int(L) |
    ready{$r,@r, task{p(PP), c(C,CC),$w}},
    schej{@s, mutex(L), time(T), wait{p(P),$t}}.

  sleep{
    sleep @@
      task{r(R,RR), t(T,TT), d(D,DD),$t}, time(P) :- int(R),int(D), P>=T, X=T+TT, Y=TT+RR, Z=T+DD |
      wake{r(Y,RR), t(X,TT), d(Z,DD),$t}, wime(P).
  }.
  task_goto_spawn @@
    sleep{$s,@s, wime(T), wake{$w}}/, spawn{$r,@r} :- int(T) |
    sleep{$s,@s, time(T)}, spawn{$r,@r, task{$w}}.
  time_goto_spawn @@
    sleep{$s,@s, time(T)}/, spawn{$r,@r} :- int(T) |
    sleep{$s,@s},           spawn{$r,@r, time(T)}.

  schedule_is_end @@
    lim(L), time(T) :- T=:=L |
    end(T).
  time_goto_sche0 @@
    lim(L), schej{@s, mutex(M)}, time(T) :- T<L,int(M) |
    lim(L), schej{@s, mutex(M), time(T)}.
  time_goto_sche1 @@ 
    lim(L), schej{@s, mutex(M), task{$t}}, time(T) :- T<L,int(M) |
    lim(L), schej{@s, mutex(M), wait{$t}, time(T)}.
  no_task_ready__ @@
    schej{@s, mutex(M), time(T)}, ready{@r} :- X=T+1,int(M) |
    schej{@s, mutex(M), cime(X)}, ready{@r}.
}.