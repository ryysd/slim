/* 
 * Union-Find algorithm in HyperLMNtal(hyperlmn)
 * Author: Seiji OGAWA, 2011-03-31
 * 
 * Examples are taken from:
 *   http://dtai.cs.kuleuven.be/CHR/examples.shtml
 *
 * If you'd like to change parameter N, 
 * please change the 1st argument of start("N").
 *
 */

{

  max1 @@ H = max(A,B) :- A =< B | H = B.
  max2 @@ H = max(A,B) :- A > B  | H = A.

  make   @@ make(A) :- root(A,0).
  union @@ union(A,B) :- find(A,X), find(B,Y), link(X,Y).

  findNode @@ find($a,link(find(X))), '~>'($a,B) :- hlink(X) | find(B,link(find(X))), '~>'($a,X).
  findRoot @@ find($a,link(find($b))), root($a,R), root($b,S) :- link($a,$b), root($a,R), root($b,S).

  linkEq   @@ link($a,$a) :- .  
  linkLeft @@ link($a,$b), root($a,NA), root($b,NB) :- NA>=NB, NB1 = NB+1 | 
      '~>'($b,$a), NA1 = max(NA,NB1), root($a,NA1), root($b,NB).
  linkRight@@ link($b,$a), root($a,NA), root($b,NB) :- NA>=NB, NB1 = NB+1 |
      '~>'($b,$a), NA1 = max(NA,NB1), root($a,NA1), root($b,NB).

  {
    start(9).

    start(S) :- i(S, 0), list = [].
    i(M, I), list = H :- M > I, I1 = I+1, new($x) | i(M, I1), list = [$x|H].
    i(M1,M2), list = H :- M1 =:= M2 | l = H.
    l = [X, Y|R] :- hlink(X), hlink(Y) | l = [X|R], root(Y, 0), union(X, Y).
    l = [X] :- root(X, 0).

  }.
  {$p, @p}/ :- $p.

}.
