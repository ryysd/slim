/*
 *  firewire.lmn -- Leader Election for Tree Identifier Protocol of IEEE1394
 *
 *  @author  Masato Gocho
 *  @date    2009.08.20
 * 
 *  @refer   [1] Vardejo, A., Pita, I. and Marti-Oliet, N.:
 *               The Leader Election Protocol of IEEE 1394 in Maude, 
 *               Vol. 36 of ENTCS, 2000.
 *           [2] Calder, M. and Miller, A.:
 *               Using SPIN to Analyse the Tree Identification Phase of 
 *                the IEEE 1394 High-Performance Serial Bus (FireWire) Protocol,
 *               in Proc. Formal Aspects of Computing, pp. 247--266, 2003.
 */

%% Property:
% 0: leader??äººä»¥ä¸?????????????
% 1: å¿???????eader??±º?¾ã?
% 2: Strong Fairness -> property2

//node{ack(phase). a(id). neig{num(1). +L0. }, children{}}, node{ack(phase). id(b). children{}, neig{num(1). +L0}}.

%% Parameter:
% NetWork0(testcode)
/*
  node{id(a), neig{num(1), +AB},         children{}, phase(rec)}.
  node{id(b), neig{num(3), +AB,+BC,+BD}, children{}, phase(rec)}.
  node{id(c), neig{num(1), +BC},         children{}, phase(rec)}.
	node{id(d), neig{num(1), +BD},         children{}, phase(rec)}.

*/
% NetWork1

  node{id(a), neig{num(1), +AC},         children{}, phase(rec)}.
  node{id(b), neig{num(1), +BC},         children{}, phase(rec)}.
  node{id(c), neig{num(3), +AC,+BC,+CE}, children{}, phase(rec)}.
  node{id(e), neig{num(3), +CE,+EF,+EG}, children{}, phase(rec)}.
  node{id(f), neig{num(1), +EF},         children{}, phase(rec)}.
  node{id(g), neig{num(1), +EG},         children{}, phase(rec)}.

/*
% NetWork2
  node{id(a), neig{num(1), +AC},         children{}, phase(rec)}.
  node{id(b), neig{num(2), +BC,+BD},     children{}, phase(rec)}.
  node{id(c), neig{num(3), +AC,+BC,+CE}, children{}, phase(rec)}.
  node{id(d), neig{num(2), +BD,+BI},     children{}, phase(rec)}.
  node{id(e), neig{num(3), +CE,+EF,+EG}, children{}, phase(rec)}.
  node{id(f), neig{num(2), +EF,+FI},     children{}, phase(rec)}.
  node{id(g), neig{num(1), +EG},         children{}, phase(rec)}.
  node{id(i), neig{num(3), +BI,+FI,+IH}, children{}, phase(rec)}.
  node{id(h), neig{num(2), +HK,+IH},     children{}, phase(rec)}.
  node{id(j), neig{num(1), +JK},         children{}, phase(rec)}.
  node{id(k), neig{num(3), +HK,+JK,+KL}, children{}, phase(rec)}.
  node{id(l), neig{num(3), +KL,+LM,+LN}, children{}, phase(rec)}.
  node{id(m), neig{num(1), +LM},         children{}, phase(rec)}.
  node{id(n), neig{num(1), +LN},         children{}, phase(rec)}.  
*/
/*
% NetWork3
  node{id(a), neig{num(1), +AC},         children{}, phase(rec)}.
  node{id(b), neig{num(2), +BC,+BD},     children{}, phase(rec)}.
  node{id(c), neig{num(3), +AC,+BC,+CE}, children{}, phase(rec)}.
  node{id(d), neig{num(2), +BD,+BI},     children{}, phase(rec)}.
  node{id(e), neig{num(3), +CE,+EF,+EG}, children{}, phase(rec)}.
  node{id(f), neig{num(2), +EF,+FI},     children{}, phase(rec)}.
  node{id(g), neig{num(1), +EG},         children{}, phase(rec)}.
  node{id(i), neig{num(6), +BI,+FI,+IH,+IJ,+IM,+IN}, children{}, phase(rec)}.
  node{id(h), neig{num(3), +HK,+IH,+HL},     children{}, phase(rec)}.
  node{id(j), neig{num(1), +IJ},         children{}, phase(rec)}.
  node{id(k), neig{num(1), +HK},         children{}, phase(rec)}.
  node{id(l), neig{num(1), +HL},         children{}, phase(rec)}.
  node{id(m), neig{num(1), +IM},         children{}, phase(rec)}.
  node{id(n), neig{num(1), +IN},         children{}, phase(rec)}.
*/

% NetWork4
/*
  node{id(a), neig{num(1), +AC},         children{}, phase(rec)}.
  node{id(b), neig{num(2), +BC,+BD},     children{}, phase(rec)}.
  node{id(c), neig{num(3), +AC,+BC,+CE}, children{}, phase(rec)}.
  node{id(d), neig{num(2), +BD,+BI},     children{}, phase(rec)}.
  node{id(e), neig{num(3), +CE,+EF,+EG}, children{}, phase(rec)}.
  node{id(f), neig{num(2), +EF,+FI},     children{}, phase(rec)}.
  node{id(g), neig{num(1), +EG},         children{}, phase(rec)}.
  node{id(i), neig{num(6), +BI,+FI,+IH,+IJ,+IM,+IN}, children{}, phase(rec)}.
  node{id(h), neig{num(4), +HK,+IH,+HL,+HO},     children{}, phase(rec)}.
  node{id(j), neig{num(1), +IJ},         children{}, phase(rec)}.
  node{id(k), neig{num(1), +HK},         children{}, phase(rec)}.
  node{id(l), neig{num(1), +HL},         children{}, phase(rec)}.
  node{id(m), neig{num(1), +IM},         children{}, phase(rec)}.
  node{id(n), neig{num(1), +IN},         children{}, phase(rec)}.
  node{id(o), neig{num(2), +HO,+OP},     children{}, phase(rec)}.
  node{id(p), neig{num(1), +OP},         children{}, phase(rec)}.
  */
% Rewriting Rule
%%%%  TODO: Delay is not implemented

% Phase: Rec (è¦??æ±????¿¡???)
recv_MSG1 @@
  msg(from(F), to(T), be_my_parent), 
  node{phase(rec), neig{num(Nu), +T, $n}, children{    $c}, $p}  :- Nu>1, N2=Nu-1 |
  node{phase(rec), neig{num(N2),     $n}, children{+F, $c}, $p}.
recv_MSG2 @@
  msg(from(F), to(T), be_my_parent),
  node{phase(rec), neig{num(1), +T}, children{    $c}, $p} :- 
  node{phase(ack), neig{num(0)    }, children{+F, $c}, $p}.
recv_end_ @@
  node{phase(rec), neig{num(1), $n}, $p} :-
  node{phase(ack), neig{num(1), $n}, $p}.

% Especially!
pass_MSG_ @@
  msg(from(A), to(T), Msg1), msg(from(B), to(T), Msg2) :-
  msg(from(F), to(B), Msg1), msg(from(F), to(A), Msg2).

% Phase: Ack
acknowled @@
  node{phase(ack), children{+J, $c}, $p} :-
  node{phase(ack), children{-Z, $c}, $p},
  msg(from(Z), to(J), acknowledgement).
ackParent @@
  node{phase(ack),        neig{num(1), +N}, children{$c}, $p} :- \+($c=($q,'+'(L))) |
  node{phase(waitParent), neig{num(1), +Z}, children{$c}, $p},
  msg(from(Z), to(N), be_my_parent).
ackLeader @@
  node{phase(ack),  id(I), neig{num(0)}, children{$c}, $p}    :- \+($c=($q,'+'(L))), unary(I) |
  node{phase(self), id(I), neig{num(0)}, children{$c}, $p}, leader(I).

% Phase: WaitParent
wait_p_1_ @@
  msg(from(F), to(T), acknowledgement), 
  node{phase(waitParent), neig{num(1), +T}, children{$c}, $p} :- \+($c=($q,'+'(L))) |
  node{phase(self),       neig{num(1), +F}, children{$c}, $p}.
wait_p_2_ @@
  msg(from(F), to(T), be_my_parent),
  node{phase(waitParent), neig{num(1), +T}, children{$c}, $p} :- \+($c=($q,'+'(L))) |
  node{phase(contention), neig{num(1), +F}, children{$c}, $p}.

% Phase: Contention
cont_Recv @@ % election lose
  msg(from(F), to(T), be_my_parent), 
  node{phase(contention), neig{num(1), +T}, children{    $c}, $p} :- \+($c=($q,'+'(L))) |
  node{phase(ack),        neig{num(0)    }, children{+F, $c}, $p}.
cont_Send @@ % election retry
  node{phase(contention), neig{num(1), +N}, $p} :- 
  node{phase(waitParent), neig{num(1), +Z}, $p},
  msg(from(Z), to(N), be_my_parent).
   