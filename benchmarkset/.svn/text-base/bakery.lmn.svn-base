/*
 * bakery.lmn -- Bakery Mutual Exclusion Algorithm
 *
 * @author  Masato Gocho
 * @date    2009.08.03
 *
 * This program is encoded from PROMELA in BEEM(http://anna.fi.muni.cz/models/)
 *
 * Property0: only one process can enter in critical section
 * Property1: [](wait -> <>crit)
 */

%% Parameter:
% p_num(PARAM1)
% nmax(PARAM2)

init{
  p_num(2).
  nmax(4).

  init0 @@
    p_num(X) :- int(X) |
    p_ini(X), p_max(X).
  init1 @@
    p_ini(X) :- X>0, X2=X-1 | 
    p_ini(X2), choosing(X2,0), number(X2,0), p{j(0), max(0), pid=X2, state=ncs}.
}.
finish_i @@
  init{p_ini(0), $p, @p}/ :- $p.

ncs2choo @@ % (1) -> choosing[_pid]=1; j=0; max=0; goto choose; 
  p{$p, pid=P, j=J, max=M, state=ncs},    choosing(C,B)  :- P=:=C,int(J),int(M),int(B)|
  p{$p, pid=P, j=0, max=0, state=choose}, choosing(C,1).
ch2choo1 @@ % j<P_NUM && number[j]>max -> max=number[j]; j++; goto choose; 
  p{$p, j=J,  max=M, state=choose}, p_max(P), number(N,Q) :- J<P, J=:=N, Q>M, J2=J+1 |
  p{$p, j=J2, max=Q, state=choose}, p_max(P), number(N,Q).
ch2choo2 @@ % j<P_NUM && number[j]<=max ->               j++; goto choose; 
  p{$p, j=J,  max=M, state=choose}, p_max(P), number(N,Q) :- J<P, J=:=N, Q=<M, J2=J+1 |
  p{$p, j=J2, max=M, state=choose}, p_max(P), number(N,Q).  
ch2_loop @@ % j==P_NUM&&max<P_MAX -> number[_pid]=max+1;j=0;choosing[_pid]=0;goto for_loop
  p{$p, j=J, max=M, pid=P, state=choose},   p_max(PM), nmax(NM), number(N,Q), choosing(C,Z)
                           :- J=:=PM, M<NM, N=:=P, C=:=P, Q2=M+1,int(Q),int(Z)|
  p{$p, j=0, max=M, pid=P, state=for_loop}, p_max(PM), nmax(NM), number(N,Q2),choosing(C,0).  
loop2wai @@ % j<P_NUM && choosing[j]==0 -> goto wait
  p{$p, j=J, state=for_loop}, p_max(P), choosing(C,0)  :- J<P, J=:=C |
  p{$p, j=J, state=wait},     p_max(P), choosing(C,0). 
loop2_cs @@ % j==P_NUM -> goto CS;
  p{$p, j=J, state=for_loop}, p_max(P)    :- J=:=P |
  p{$p, j=J, state=cs},       p_max(P).
wait2lp1 @@ % number[j]==0 -> j++; goto for_loop;
  p{$p, j=J,  state=wait},     number(N,0)    :- J=:=N, J2=J+1 |
  p{$p, j=J2, state=for_loop}, number(N,0).  
wait2lp2 @@ % number[j]>number[_pid] -> j++; goto for_loop;
  p{$p, pid(P), j=J, state=wait},      number(N,Q), number(M,W) :- J=:=N, P=:=M, Q>W, J2=J+1 |
  p{$p, pid(P), j=J2, state=for_loop}, number(N,Q), number(M,W).  
wait2lp3 @@ % number[j]==number[_pid] && _pid<=j -> j++; goto for_loop;
  p{$p, pid(P), j=J,  state=wait},     number(N,Q), number(M,W) :- J=:=N,P=:=M,Q=:=W,P<J,J2=J+1 |
  p{$p, pid(P), j=J2, state=for_loop}, number(N,Q), number(M,W).  
wait2lp32@@ % number[j]==number[_pid] && _pid<=j -> j++; goto for_loop;
  p{$p, pid(P), j=J,  state=wait},     number(N,Q) :- J=:=N, P=:=N, P=:=J, J2=J+1 |
  p{$p, pid(P), j=J2, state=for_loop}, number(N,Q).  
cs_2_ncs @@ % (1) -> number[_pid] = 0; goto NCS;
  p{$p, pid=P, state=cs},  number(N,Q)    :- P=:=N, int(Q) |
  p{$p, pid=P, state=ncs}, number(N,0).
