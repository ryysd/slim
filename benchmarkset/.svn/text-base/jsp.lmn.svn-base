/*
 *  jsp.lmn -- job-shop scheduling problem
 *
 *  @author  Masato Gocho
 *  @date    2009.08.04
 */


%        | no.1  | no.2  | no.3   
%--------------------------------
%     J1 |(M1, 3)|(M2, 3)|(M3, 2)
%--------------------------------
%     J2 |(M1, 2)|(M3, 5)|(M2, 3)
%--------------------------------
%     J3 |(M2, 2)|(M3, 6)|(M1, 1)

% property0: 最終状態の探索

% task=[m(MachineID, ElapseTime, FinishTime),...]

{
  
  % system0(testcode)
  job{id(1), task=[m(1,0,3), m(2,0,3), m(3,0,2)]}.
  job{id(2), task=[m(1,0,2), m(3,0,5), m(2,0,3)]}.
  job{id(3), task=[m(2,0,2), m(3,0,6), m(1,0,1)]}.

  machine(1, free).
  machine(2, free).
  machine(3, free).
  
  /*
  % system1
  job{id(1), task=[m(1,0,3), m(2,0,3), m(4,0,5), m(3,0,2)]}.
  job{id(2), task=[m(1,0,2), m(4,0,4), m(3,0,5), m(2,0,3)]}.
  job{id(3), task=[m(2,0,2), m(3,0,3), m(1,0,1), m(4,0,2)]}.
  job{id(4), task=[m(2,0,1), m(3,0,5), m(4,0,3), m(1,0,2)]}.
  job{id(5), task=[m(2,0,8), m(3,0,2), m(4,0,1), m(1,0,5)]}.
  job{id(6), task=[m(2,0,2), m(3,0,4), m(1,0,6)]}.

  machine(1, free).
  machine(2, free).
  machine(3, free).
  machine(4, free).
  */
  /*
  % system2
  job{id(1), task=[m(1,0,3), m(2,0,3), m(4,0,5), m(3,0,2)]}.
  job{id(2), task=[m(1,0,2), m(4,0,4), m(3,0,5), m(2,0,3)]}.
  job{id(3), task=[m(2,0,2), m(3,0,3), m(1,0,1), m(4,0,2)]}.
  job{id(4), task=[m(2,0,1), m(3,0,5), m(4,0,3), m(1,0,2)]}.
  job{id(5), task=[m(2,0,8), m(3,0,2), m(4,0,1), m(1,0,5)]}.
  job{id(6), task=[m(2,0,2), m(3,0,4), m(1,0,6)]}.
  job{id(7), task=[m(1,0,5), m(4,0,5)]}.

  machine(1, free).
  machine(2, free).
  machine(3, free).
  machine(4, free).
  */
  /*
  % system3
  job{id(1), task=[m(1,0,3), m(2,0,3), m(4,0,5), m(3,0,2)]}.
  job{id(2), task=[m(1,0,2), m(3,0,5), m(2,0,3)]}.
  job{id(3), task=[m(2,0,2), m(3,0,3), m(4,0,2)]}.
  job{id(4), task=[m(2,0,1), m(4,0,3), m(1,0,2)]}.
  job{id(5), task=[m(2,0,8), m(3,0,2), m(4,0,1), m(1,0,5)]}.
  job{id(6), task=[m(2,0,2), m(3,0,4), m(1,0,6)]}.
  job{id(7), task=[m(1,0,5), m(4,0,5)]}.
  job{id(8), task=[m(1,0,2), m(2,0,2), m(3,0,2)]}.

  machine(1, free).
  machine(2, free).
  machine(3, free).
  machine(4, free).
  */

% default
  time(1).
  phase(set).

set_machine @@ 
  phase(set),     job{task=[m(M1,X,Y) |F], $p[F]}, machine(M2, free) :- M1=:=M2, int(X), int(Y) |
  phase(set),     job{task=[m(L0,X,Y) |F], $p[F]}, machine(M2, L0).
do_job_task @@
  phase(do_task), job{task=[m(L0,X,Y) |F], $p[F]}, machine(M, L0)    :- Z=X+1, Z<Y |
  phase(do_task), job{sync=[m(L0,Z,Y) |F], $p[F]}, machine(M, L0).
finish_task @@
  phase(do_task), job{task=[m(L0,X,Y),N |F], $p[F,N]}, machine(M, L0)    :- Z=X+1, Z=:=Y |
  phase(do_task), job{task=[          N |F], $p[F,N]}, machine(M, free).
finish_all_ @@
  phase(do_task), job{$p, task=[m(L0,X,Y) |[]]}, machine(M, L0)    :- Z=X+1, Z=:=Y |
  phase(do_task), fin{$p},                       machine(M, free).
elapse_time @@
  phase(sync),    time(T) :- Y=T+1 |
  phase(sync_ok), time(Y).
sig_sync_ok @@
  phase(sync_ok), job{sync=[m(L0,X,Y) |F], $p[F,X,Y]} :-
  phase(sync_ok), job{task=[m(L0,X,Y) |F], $p[F,X,Y]}.
}.

set_machine_ok @@ % phase: "set"->"do_task" 
  {$p, @p, phase(set)}/ :- 
  {$p, @p, phase(do_task)}.
sync_elapsTime @@
  {$p, @p, job{$j}, phase(do_task)}/ :-
  {$p, @p, job{$j}, phase(sync)}.
check_machine_ @@
  {$p, @p, phase(sync_ok)}/ :-
  {$p, @p, phase(set)}.