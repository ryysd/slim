/*---------------------------------------------------------
Encoding of the lambda calculus and Church numerals

Ueda, K., Encoding the Pure Lambda Calculus into Hierarchical
Graph Rewriting, RTA 2008, LNCS 5117, 2008, pp.392-408.
---------------------------------------------------------*/

beta@@ H=apply(lambda(A, B), C) :- H=B, A=C.

l_c@@  lambda(A,B)=cp(C,D,$l) :- hlink($l), new($l1), new($l2) |
         C=lambda(E,F), D=lambda(G,H), A=cp(E,G,$l1), B=cp(F,H,$l2),
         sub($l2,$l), partner($l1,$l2).
a_c@@  apply(A,B)=cp(C,D,$l) :- hlink($l) |
         C= apply(E,F), D= apply(G,H), A=cp(E,G,$l), B=cp(F,H,$l).

c_c1@@ cp(A,B,$l1)=cp(C,D,$l2), partner($l1,$l2) :-
         hlink($l1), hlink($l2) |
         A=C, B=D, partner($l1,$l2).
c_c2@@ cp(A,B,$l1)=cp(C,D,$l2), top($l2) :-
         hlink($l1), hlink($l2) |
         C=cp(E,F,$l1), D=cp(G,H,$l1), 
         A=cp(E,G,$l2), B=cp(F,H,$l2), top($l2).
u_c@@  $u=cp(A,B,$l) :- unary($u), hlink($l) | A=$u, B=$u.

l_r@@  lambda(A,B)=rm :- A=rm, B=rm.
a_r@@  apply(A,B)=rm :- A=rm, B=rm.
c_r1@@ cp(A,B,$l)=rm :- hlink($l) | A=rm, B=rm.
c_r2@@ cp(A,B,$l)=rm :- hlink($l) | A=rm, B=rm.
r_r@@  rm=rm :- .
u_r@@  $u=rm :- unary($u) | .

promote@@ partner($l1,$l2), sub($l2,$l3) :-
            num($l1)=:=1, hlink($l2), hlink($l3) |
            $l2 >< $l3.
c2c@@  A=cp(B,C) :- new($l) | A=cp(B,C,$l), top($l).
gc@@   top($l) :- num($l)=:=1 | .

// exponentiation of natural numbers in Church encoding
// n is encoded as f^n x // then n^m is encoded as lambda n m -> m n

N=n(0) :- N=lambda(rm, lambda(X, X)).
N=n(1) :- N=lambda(F, lambda(X, apply(F,X))).
N=n(2) :- N=lambda(cp(F0,F1), lambda(X,
              apply(F0,apply(F1,X)))).
N=n(3) :- N=lambda(cp(F0,cp(F1,F2)), lambda(X,
              apply(F0,apply(F1,apply(F2,X))))).
//  N=n(4) :- N=lambda(cp(F0,cp(F1,cp(F2,F3))), lambda(X,
//              apply(F0,apply(F1,apply(F2,apply(F3,X)))))).
//  r=apply(apply(apply(n(2), n(2)),succ),0).
//  r=apply(apply(apply(apply(n(2), n(2)),n(2)),succ),0).
//  r=apply(n(2),apply(n(2), n(2))).
r=apply(n(2), n(2)).
//  r=apply(apply(apply(apply(n(3), n(2)),n(2)),s),0).
// r=apply(apply(apply(n(2),apply(n(2), n(3))),s),0).
  H=apply(s, I) :- int(I) | H=I+1.
//}.