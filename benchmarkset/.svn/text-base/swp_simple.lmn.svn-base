{
 wSize(2).     // ウィンドウサイズ
 nMAX(2).     // 再送処理などの制御に利用するナンバーnの上限値
 
 sender{ n(0), c(0) }.  // データ送信者
 ss=rr.                 // データが通る通信路
 rs=sr.                 // ACKが通る通信路
 receiver{ n(0) }.      // データ受信者
 
 // 送信者 : データの送信 sender -> [data]
 s_send@@ sender{ n(N), c(C) }, nMAX(NMAX),wSize(W), ss=SC
   :- C<W, C_=C+1, DN=(N+C) mod NMAX
   |  sender{ n(N), c(C_)}, nMAX(NMAX), wSize(W), ss=[data(DN)|SC].
 
 // 受信者 : データ受信，ACKの返送(予期していたデータ) [data] -> receiver -> [ack]
 r_rec@@ receiver{ n(N) }, nMAX(NMAX), SC=[data(DN)|rr], rs=RC
   :- N=:=DN, N_=(N+1) mod NMAX
    | receiver{ n(N_) }, nMAX(NMAX), SC=rr, rs=[ack(DN)|RC].
 
 // 受信者 : データ受信，データ破棄(受信するはずのデータの消失検出) [data] -> []
 r_unrec@@ receiver{ n(N) }, SC=[data(DN)|rr]
   :- N=\=DN, ground(SC)
    | receiver{ n(N) }, SC=rr.
 
 // 送信者 : ACKの受信(予期していたACK) [ack] -> slide
 s_slide@@ sender{ n(N), c(C) }, nMAX(NMAX), RC=[ack(ACK)|sr]
  :- N=:=ACK, C>0, N_=(N+1) mod NMAX, C_=C-1
   | sender{ n(N_), c(C_)}, nMAX(NMAX), RC=sr.
 
 // 送信者 : ACKの受信，ACKの破棄(データかACKの消失検出) [ack] -> []
 s_r@@ sender{ n(N), c(C) }, RC=[ack(ACK)|sr]
  :- N=\=ACK, int(C)
   | sender{ n(N), c(C) }, RC=sr.
 
 // 送信者 : タイムアウトの検出 [timeout] -> reset
 s_timeout@@ sender{ n(N), c(C) }, timeout
  :- int(N), int(C)
   | sender{ n(N), c(0) }.
 
 // 通信路 : データ,ACKの消失 [data] -> [], [ack] -> []
 lost_data@@ X=[data(DN)|Y] :- int(DN) | X=Y.
 lost_ack@@ X=[ack(ACK)|Y] :- int(ACK) | X=Y .
 
 // 通信路 : 順序逆転
 //sd@@ X=[data(DN1),data(DN2)|Y] :- X=[data(DN2),data(DN1)|Y].
 //sa@@ X=[ack(A1),ack(A2)|Y] :- X=[ack(A2),ack(A1)|Y].
}.
// タイムアウトの発生 [] -> [timeout]
o_timeout@@ { $p, @p }/ :- { timeout, $p, @p }.