{ module(amb).

/* n[in m.P | Q] | m[R] --> m[n[P|Q] | R] */
in@@
{amb($n), in($m,{$p}), $q,@q}, {amb($m), $r,@r} :-
   hlink($n), hlink($m) |
   {amb($m), {amb($n), $p,$q,@q}, $r,@r}.

/* m[n[out m.P | Q] | R] --> n[P|Q] | m[R] */
out@@
{amb($m), {amb($n), out($m,{$p}), $q,@q}, $r,@r} :-
   hlink($m), hlink($n) |
    {amb($n), $p,$q,@q}, {amb($m), $r,@r}.

/* open m.P | m[Q] --> P|Q */
open@@
open($m,{$p}), {amb($m), $q,@q} :- hlink($m) |
   $p, $q.

/* !(open m) | m[Q] --> Q | !(open m) */
open_repl@@  /* special case of !open */
open_repl($m,{$p}), {amb($m), $q,@q} :- hlink($m) |
   nlmem.copy({$p},cp,Copies), copies(Copies,P),
   $q, open_repl($m,P).
open_repl_aux@@
copies(cp(C1,C2),P), {+C1,$p1} :- $p1, P=C2.

gc4@@ amb.use :- .
}.

% amb.use.

// Locks /////////////////////////////////////////////////////////////////
//   acquire n.P =def open n.P
//   release n.P =def n[] | P 
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use. locks.
acquire($n,P) :- hlink($n) | open($n,P).
release($n,{$p}) :- hlink($n) | {amb.use, amb($n)}, $p.

l :- new($n), new($m) | 
   acquire($n,{release($m,{pp})}),
   release($n,{acquire($m,{qq})}).
l.
}.
*/
// Mobile Agent Authentication ///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use.  authentication.
l :- new($h), new($a), new($n) |
  name(home,$h), name(agent,$a),
  {amb.use. amb($h), open($n,{}),
    {amb.use. amb($a),
     out($h, {in($h, {{amb($n), out($a,{open($a,{pp})})}})})}}.
l.
}.
*/
// Firewall Access ///////////////////////////////////////////////////////
//   Firewall =def (new w) w[k[out w.in k'.in w] | open k'.open k''.P]
//   Agent    =def k'[open k.k''[Q]]
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use.  firewall.
l :- new($k), new($kk), new($kkk), new($w) |
name(k,$k), name(kk,$kk), name(kkk,$kkk),
{amb.use. amb($w),
  {amb.use. amb($k),
    out($w,{in($kk,{in($w,{})})})},
  open($kk,{open($kkk,{pp})})
},
{amb.use. amb($kk),
  open($k,{{amb($kkk), qq}})
}.
l.
}.
*/
// Objective Moves ///////////////////////////////////////////////////////
//   allow n    =def !open n
//   mv in n.P  =def (new k) k[in n.enter[out k.open k.P]]
//   mv out n.P =def (new k) k[out n.exit[out k.open k.P]]
//   n_dn[P]    =def n[P | allow enter]   (n_dn allows mv in)
//   n_up[P]    =def n[P] | allow exit    (n_up allows mv out)
//   n_dnup[P]  =def n[P | allow enter] | allow exit
//                                        (n_dnup allows mv in and mv out)
//////////////////////////////////////////////////////////////////////////

{ amb.use.  objectivemoves.
{ module(b).
allow@@
  allow($n) :- hlink($n) | open_repl($n,{}).
mv_in@@
  name(enter,$enter) \ mv_in($n,{$p}) :-
    hlink($n), new($k), hlink($enter) |
    {amb.use. amb($k), in($n,{{amb($enter), out($k,{open($k,{$p})})}})}.
mv_out@@
  name(exit,$exit) \ mv_out($n,{$p},$exit) :-
    hlink($n), new($k), hlink($exit) |
    {amb.use. amb($k), out($n,{{amb($exit), out($k,{open($k,{$p})})}})}.
n_dnup@@
  name(enter,$enter), name(exit,$exit) \ n_dnup($n,{$p}) :-
    hlink($n), hlink($enter), hlink($exit) | 
    {amb.use. b.use. amb($n), $p, allow($enter)},
    allow($exit).
names :- new($enter), new($exit) |
     name(enter,$enter), name(exit,$exit).

b.use :- .
{module(b), @b} :- .
//namefusion@@
//  name($n1,$e1), name($n2,$e2) :- $n1=$n2, hlink($e1), hlink($e2) |
//      name($n1,$e1), $e1><$e2.
}.

b.use. names.
l :- new($n) |
     name(n,$n), mv_in($n,{pp}), n_dnup($n,{qq}).
l.
}.

// Choice ////////////////////////////////////////////////////////////////
//   n=>P + m=>Q =def (new p q r) (
//                        p[in n.out n.q[out p.open r.P]] |
//                        p[in m.out m.q[out p.open r.Q]] |
//                        open q | r[])
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use.  choice.
choice@@
choice($n,{$pp},$m,{$qq}) :- hlink($n), hlink($m), new($p), new($q), new($r) |
  {amb.use. amb($p). 
     in($n,{out($n,{{amb($q), out($p,{open($r,{$pp})})}})})},
  {amb.use. amb($p). 
     in($m,{out($m,{{amb($q), out($p,{open($r,{$qq})})}})})},
  open($q,{}), {amb.use, amb($r)}.

l :- new($n), new($m) |
choice($n,{pp},$m,{qq}), {amb.use, amb($n), rr}.
l.
}.
*/
// Renaming //////////////////////////////////////////////////////////////
//   n be m.P =def m[out n.open n.P] | in m
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use.  renaming.
{ module(r).
rename($n,$m,{$p}) :- hlink($n), hlink($m) |
  {amb.use, amb($m), out($n,{open($n,{$p})})},
  in($m,{}).
gc@@ r.use :- .
gc@@ {module(r), @r} :- .
}.

r.use.
l :- new($m), new($n) | 
name(m,$m), name(n,$n),
{amb.use. r.use. amb($n), rename($n,$m,{pp}), qq}.
l.
}.
*/