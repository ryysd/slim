/*
 *  sstd.lmn -- Termination Detection for Stack-Slicing Algorithm in LMNtal Model Checker
 *
 *  @author  Masato Gocho
 *  @date    2009.11.25
 *
 */


/*
  while (1) {
    if (is_empty_queue(SS_THREAD_WQUEUE(th))) {  // line(1)
      THREAD_UNSET_ACTIVE(th);                   // line(2)
      if(token_termination_detection(th)) {      // line(3),  if th0 goto line(10)
        break;                                  
      }
    }
    else {
      THREAD_SET_ACTIVE(th);                     // line(5)
      if((s = (State *)dequeue(SS_THREAD_WQUEUE(th)))) {
        vec_push(my_stack, (LmnWord)s);
        ss_nd_loop(th, my_stack);                // line(6)
        vec_clear(my_stack);
      }
    }
  }

 inline
 BOOL token_termination_detection(LmnThread *root)
 {
   int i, n;
   BOOL ret;
   if (THREAD_ID(root) != 0) return is_terminated;
 
   ret = TRUE;
   n   = lmn_env.core_num;
   for (i = 0; i < n; i++) {
     LmnThread *th = lmn_threads[i];
     ret = !THREAD_IS_ACTIVE(th) &&  // line(10) && isActive
            THREAD_IS_WHITE(th)  &&  // line(10) && isBlack
            THREAD_CHECK(th);        // line(10) && isEmptyQ
     THREAD_SET_WHITE(th);
     if (!ret) return FALSE;
   }
   is_terminated = ret;
   return ret;
 }
*/

ss{
proc_generator{
  n=2.
  isTerminated(0).
  _init0 @@ n(X) :- int(X), Y=X-1 |
            m(Y), th_num(X).
  _init1 @@ m(X) :- X>0, Y=X-1 | // 0:FALSE 1:TRUE
            m(Y),   th{id(X), isActive(1), isBlack(0), isEmptyQ(1), line(1)}.
  _init2 @@ m(0) :- th{id(0), isActive(1), isBlack(0), isEmptyQ(1), line(6)}.
}.
_init_end_ @@ proc_generator{$p, @p}/ :- $p.

line1__Q_is_EMPTY___ @@ % if (is_empty_queue(SS_THREAD_WQUEUE(th))) {  // line(1)
  th{line(1), isEmptyQ(1), $p} :-
  th{line(2), isEmptyQ(1), $p}.
line1__Q_is_NonEmpty @@ % if (is_empty_queue(SS_THREAD_WQUEUE(th))) {  // line(1)
  th{line(1), isEmptyQ(0), $p} :-
  th{line(5), isEmptyQ(0), $p}.
line2__TH_UNSET_ACTV @@ % THREAD_UNSET_ACTIVE(th);                   // line(2)
  th{line(2), isActive(A), $p} :- int(A) |
  th{line(3), isActive(0), $p}.
line5__TH_SET___ACTV @@ % THREAD_SET_ACTIVE(th)
  th{line(5), isActive(A), $p} :- int(A) |
  th{line(6), isActive(1), $p}.
line3__thN_td_TRUE__ @@ % if(token_termination_detection(th)) {      // line(3),  if th0 goto line(10)
  th{line(3), id(I), $p}, isTerminated(1) :- I=\=0 |
  th{line(0), id(I), $p}, isTerminated(1).
line3__thN_td_FALSE_ @@ % if(token_termination_detection(th)) {      // line(3),  if th0 goto line(10)
  th{line(3), id(I), $p}, isTerminated(0) :- I=\=0 |
  th{line(1), id(I), $p}, isTerminated(0).
line3__th0_td_start_ @@ % if(token_termination_detection(th)) {      // line(3),  if th0 goto line(10)
  th{line(3), id(0), $p}, th_num(X) :- int(X) |
  th{line(10),id(0), $p}, th_num(X), token(0, 0), isActive.
line10_td0_td_loop_A @@ % ret = !THREAD_IS_ACTIVE(th) &&  // line(10) && isActive
  th{id(I), isActive(A), $p}, token(Z, T), isActive :- I=:=T, S=Z+A |
  th{id(I), isActive(A), $p}, token(S, T), isBlack.
line10_td0_td_loop_B @@ % THREAD_IS_WHITE(th)  &&  // line(10) && isBlack
  th{id(I), isBlack(B), $p}, token(Z, T), isBlack :- I=:=T, S=Z+B |
  th{id(I), isBlack(B), $p}, token(S, T), isEmptyQ.
line10_td0_td_loop_Q @@ % THREAD_CHECK(th);        // line(10) && isEmptyQ
  th{id(I), isEmptyQ(Q), $p}, token(Z, T), isEmptyQ :- I=:=T, S=Z+(1-Q) |
  th{id(I), isEmptyQ(Q), $p}, token(S, T), resetColor.
line10_td0_td_resetC @@  
  th{id(I), isBlack(Q), $p}, token(Z, T), resetColor :- I=:=T, Y=T+1, int(Q) |
  th{id(I), isBlack(0), $p}, token(Z, Y), isActive.
line10_th0_td_fail__ @@
  th{line(10), id(0), $p}, th_num(X), token(T, Y), isActive :- T=\=0, Y=:=X |
  th{line(1),  id(0), $p}, th_num(X).
line10_th0_td_succ__ @@
  th{line(10), id(0), $p}, th_num(X), isTerminated(T), token(0, Y), isActive :- Y=:=X, int(T) |
  th{line(0),  id(0), $p}, th_num(X), isTerminated(1).
line6__finish_NDloop @@
  th{line(6), $p} :-
  th{line(1), $p}.
line6__ND_HandoffBIG @@
  th{line(6), id(I), $p}, th{id(J), isEmptyQ(Q), $q}, th_num(T) :- I<J, J=:=((I+1) mod T), int(Q) |
  th{line(8), id(I), $p}, th{id(J), isEmptyQ(0), $q}, th_num(T).
line6__ND_HandoffSML @@
  th{line(6), id(I), isBlack(B), $p}, th{id(J), $q}, th_num(T) :- I>J, J=:=((I+1) mod T), int(B) |
  th{line(7), id(I), isBlack(1), $p}, th{id(J), $q}, th_num(T).
line7__handoff___ENQ @@
  th{line(7), id(I), $p}, th{id(J), isEmptyQ(Q), $q}, th_num(T) :- I>J, J=:=((I+1) mod T), int(Q) |
  th{line(8), id(I), $p}, th{id(J), isEmptyQ(0), $q}, th_num(T).
line8__set_active___ @@
  th{line(8), id(I), $p}, th{id(J), isActive(A), $q}, th_num(T) :- J=:=((I+1) mod T), int(A) |
  th{line(6), id(I), $p}, th{id(J), isActive(1), $q}, th_num(T).
}.
end @@ ss{$p,@p}/ :- $p.