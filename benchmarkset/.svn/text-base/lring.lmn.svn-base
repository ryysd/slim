/*
 *  lring.lmn -- Leader Election (Logical Ring Algorithm)
 *
 *  @author  Masato Gocho
 *  @date    2009.08.10
 *           2009.11.19  modified
 */

%??¼ª?£ã???²¿?£ã?ID???å¤§å???????. ?????D????£ã????????? Leader?????

% property0: ????????±º?¾ã????????????

{
  init{
    p_num=3. // # of processes
    init1 @@
      p_num(P) :- Q=P-1 |
      p_set(Q,P), list=[p{id(Q), leader(-1), state(normal)}].
    init2 @@
      p_set(Q,Z), list=[X |F] :- P=Q-1, Q>0 |
      p_set(P,Z), list=[p{id(P), leader(-1), state(normal)}, X |F].
    init3 @@
      p_set(0,Z), list=E, F=[] :-
      p_fin(Z), E=F.
  }.
  
  init_finalize @@ % start 1st election
    init{$i,@i, p_fin(P), p{$p, state(normal)}}/ :- int(P), Q=P+1 |
    $i, p_num(P), p{$p, state(elect)}.

%  INIT (c.f, p_num=3): ring list                
%    ---------------------------------------    
%    |                                     |    phase(0) <-> phase(1)
%    ----o--------------o--------------o----    
%   _____|_____    _____|_____    _____|_____    
%  |     +     |  |     +     |  |     +     |   
%  | id(1)     |  | id(2)     |  | id(3)     |
%  | leader(?) |  | leader(?) |  | leader(?) |
%  |___________|  |___________|  |___________|
%  

  phase(0).

  % If Others noticed that Leader has crashed, then they start the new election.
  notice_L @@
    phase(0), crash{id(I), $p}, p{leader(L), state(normal), $q}  :- L=:=I |
    phase(0), crash{id(I), $p}, p{leader(-1), state(elect), $q}.

  % Try connection using ring
  send_elect @@
    phase(0), E=[L0           |F], p{+L0, id(I), state(elect), $p} :- int(I) |
    phase(0), E=[L0, elect(I) |F], p{+L0, id(I), state(e_wait), $p}.
  pass_elect @@
    phase(0), E=[    elect(M), L0 |F], crash{+L0, $p} :-
    phase(0), E=[L0, elect(M)     |F], crash{+L0, $p}.
  lose_elect @@
    phase(0), E=[    elect(M), L0 |F], p{+L0, id(I), state(S),    $p} :- I < M, unary(S) |
    phase(0), E=[L0, elect(M)     |F], p{+L0, id(I), state(lose), $p}.
  win__elect @@
    phase(0), E=[    elect(M), L0 |F], p{+L0, id(I), state(S),    $p} :- I > M, unary(S) |
    phase(0), E=[L0, elect(I)     |F], p{+L0, id(I), state(e_wait), $p}.
  leadrElect @@
    phase(0), E=[elect(M), L0 |F], p{+L0, id(I), state(S), leader(L). $p} :- I=:=M, unary(S), int(L) |
    phase(0), E=[          L0 |F], p{+L0, id(I), state(leader), leader(I), $p}.
    
  broadcastL @@
    phase(1), E=[L0           |F], p{+L0, id(I), state(leader), $p} :- int(I) |
    phase(1), E=[L0, coord(I) |F], p{+L0, id(I), state(coord),  $p}.
  get__Coord @@
    phase(1), E=[coord(I), L0 |F], p{+L0, state(lose), leader(L), $p} :- int(I), int(L) |
    phase(1), E=[L0, coord(I) |F], p{+L0, state(normal), leader(I), $p}.
  pass_Coord @@
    phase(1), E=[coord(I), L0 |F], crash{+L0, $p} :-
    phase(1), E=[L0, coord(I) |F], crash{+L0, $p}.
  end__Coord @@
    phase(1), E=[coord(C), L0 |F], p{+L0, state(coord), $p} :- int(C) |
    phase(1), E=[          L0 |F], p{+L0, state(normal), $p}.
}.

% Leader Election is finished.
electEND @@
  {$p, @p, phase(0)}/ :-
  {$p, @p, phase(1)}.
coordEND @@
  {$p, @p, phase(1)}/ :-
  {$p, @p, phase(0)}.

% when phase=normal, Leader process might be crashed
crash__L @@
  {$p[L0],@p, phase(0), p{+L0, id(I), leader(L), $l}}/ :- I=:=L |
  {$p[L0],@p, phase(0), crash{+L0, id(I), leader(-1), $l}}.