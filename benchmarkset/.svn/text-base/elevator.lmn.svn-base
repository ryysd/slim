/*
 *  elevator.lmn -- like an elevator system
 *
 *  @author  Masato Gocho
 *  @date    2009.01.14
 */

%% Property:
% 0: 乗客は, 1階から他のフロアへ移動することができる
% 1: Strong Fairness -> property1

%% Parameter:
% nf(PARAM1)
% np(PARAM2)
 
nf(3).					% number of floors
np(2).					% number of passengers
ctl{call([])}.	% request manager
elv{}.					% Elevator
flr([]).

%%%%%%%%%%%% initialize %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
set_nf @@ % The floor is initialized.
  nf(NF), elv{$e[]},flr(A)      :- int(NF), NF > 0, _NF = NF - 1	|
  nf(_NF),elv{$e[], button(NF)},
  flr=L1, '.'((NF, L0), L2, L1), L2=A, flr{+L0, button, door(close)}.
set_np @@ % Passenger's position is initialized.
  nf(0), np(NP),  flr{$f, @f}   :- int(NP), NP > 0, _NP = NP - 1 |
  nf(0), np(_NP), flr{p(NP),$f,@f}.
set_el @@ % Elevator's position is initialized.
  elv{$e[], @e},      flr{$f, @f}, np(0), nf(0)  :-
  elv{$e[], @e, +L1}, flr{$f, @f, +L1}.

%%%%%%%%%%%% Passenger Behavior %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
push_f @@ % Passenger calls Elevator from Floor.
  ctl{$c[C], @c, '[]'(C)},
  elv{$e, @e, button(B)},
  flr{$f, @f, p(P), button, door(close), +L0}, L=[(X, L0) |R] :- X=:=B, int(P)	|
  ctl{$c[C], @c, C=L1, '.'(X, L2, L1), L2='[]'},
  elv{$e, @e},
  flr{$f, @f, p(P), door(close), +L0},	L=[(X, L0) |R].
push_e @@ % Passenger requests Floor from Elevator.
  ctl{$c[C], @c, '[]'(C)},
  elv{$e, @e, p(P), button(B)},
  flr{$f, @f, button, +L0}, L=[(X, L0) |R] :- X=:=B, int(P)	|
  ctl{$c[C], @c, C=L1, '.'(X, L2, L1), L2='[]'},
  elv{$e, @e, p(P)},
  flr{$f, @f, +L0}, L=[(X, L0) |R].
goto_e @@ % Passenger move from Floor to Elevator.
  elv{$e, @e, +L1},       flr{$f, @f, +L1, door(open), p(P)}	:- int(P) |
  elv{$e, @e, +L1, p(P)}, flr{$f, @f, +L1, door(open)}.
goto_f @@ % Passenger move from Elevator to Floor.
  elv{$e, @e, +L1, p(P)}, flr{$f, @f, +L1, door(open)}       :- int(P) |
  elv{$e, @e, +L1},       flr{$f, @f, +L1, door(open), p(P)}.

%%%%%%%%%%%% Elevator & Door Behavior %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
moveE1 @@ % Elevator moves: up.
  ctl{$c[F], @c, call=[C |F]}, elv{$e, @e, +L1}, flr{$p, @p, +L3},
  flr{$f, @f, door(close), +L0, +L1}, L=[(X,L0), (X2,L3) |R]    :- int(X2), C>X |
  ctl{$c[F], @c, call=[C |F]}, elv{$e, @e, +L1}, flr{$p, @p, +L3, +L1},
  flr{$f, @f, door(close), +L0},      L=[(X,L0), (X2,L3) |R].
moveE2 @@ % Elevator moves: down.
  ctl{$c[F], @c, call=[C |F]}, elv{$e, @e, +L1}, flr{$p, @p, +L3}, 
  flr{$f, @f, +L1, door(close), +L0}, L=[(X, L3), (X2, L0) |R]  :- int(X2), C<X2 |
  ctl{$c[F], @c, call=[C |F]}, elv{$e, @e, +L1}, flr{$p, @p, +L3, +L1}, 
  flr{$f, @f, door(close), +L0}, L=[(X, L3), (X2, L0) |R].
open_D @@	% Open the Door!
  ctl{$c[E,F], @c, E=[C |F]}, elv{$e, @e, +L1},
  flr{$f, @f, +L1, door(close), +L0},        L=[(X, L0) |R]     :- X=:=C |
  ctl{$c[E,F], @c, E=F},      elv{$e, @e, +L1, button(C)},
  flr{$f, @f, +L1, door(open), button, +L0}, L=[(X, L0) |R].

closeD @@ % Close the Door!
  elv{$e, @e, +L1}, flr{$f, @f, +L1, door(open)}	 :-
  elv{$e, @e, +L1}, flr{$f, @f, +L1, door(close)}.