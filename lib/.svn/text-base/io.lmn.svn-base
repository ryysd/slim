/*
 * io.lmn - io module
 *
 *   Copyright (c) 2008, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 */

{
module(io).

// io.println(X) :- unary(X) |
//     '$callback'('print_line', X). 

H = io.read_line(Port, RetPort) :- class(Port, "port") |
    '$callback'('cb_port_read_line', Port, RetPort, H).

H = io.read_char(Port, RetPort) :- class(Port, "port") |
    '$callback'('cb_port_getc', Port, RetPort, H).

H=io.stdin :- '$callback'('cb_port_stdin', H).
H=io.stdout :- '$callback'('cb_port_stdout', H).

io.close_port(Port, RetPort) :- class(Port, "port") |
    '$callback'('cb_port_close', Port, RetPort).

io.free_port(Port) :- class(Port, "port") |
    '$callback'('cb_port_free', Port).

io.print_char(Port, C, RetPort) :- unary(C), class(Port, "port") |
    '$callback'('cb_port_putc', Port, C, RetPort).

io.print(Port, S, RetPort) :- string(S), class(Port, "port") |
    '$callback'('cb_port_puts', Port, S, RetPort).

io.print_newline(Port, RetPort) :- class(Port, "port") |
    '$callback'('cb_print_newline_with_port', Port, RetPort).

io.print_line(Port, S, RetPort) :- string(S), class(Port, "port") |
    '$callback'('cb_print_line_with_port', Port, S, RetPort).

io.print_mem(Port, {$p[], @p}, RetPort) :- class(Port, "port") |
    '$callback'('cb_dump_mem', Port, {$p[], @p}, RetPort).

/* string port */

H=io.open_output_string() :-
    '$callback'('cb_make_output_string', H).

H=io.open_input_string(S) :- string(S) |
    '$callback'('cb_make_input_string', S, H).

H=io.output_string(Port, RetPort) :- class(Port, "port") |
    '$callback'('cb_port_output_string', Port, RetPort, H).
}.
